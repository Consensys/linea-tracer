/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package net.consensys.linea.zktracer;

import static org.junit.jupiter.api.Assertions.fail;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.zip.GZIPInputStream;

import lombok.extern.slf4j.Slf4j;
import net.consensys.linea.testing.ToyExecutionEnvironment;
import org.junit.jupiter.api.Test;

/**
 * Replays are captured on a fully (not snapshot) synchronized Besu node running the plugin:
 *
 * <pre>{@code
 * curl -X POST 'http://localhost:8545'
 * --data '{
 *    "jsonrpc":"2.0",
 *    "method":"rollup_captureConflation",
 *    "params":["296519", "296521"], "id":"1"
 *  }'
 * | jq '.result.capture' -r
 * | gzip > arithmetization/src/test/resources/replays/my-test-case.json.gz
 * }</pre>
 *
 * One can run this command: scripts/capture.pl --start xxx --end yyy --output my-test-case.json.gz
 */
@Slf4j
public class ReplayTests {
  /**
   * Loads a .json or .json.gz replay file generated by the {@link
   * net.consensys.linea.blockcapture.BlockCapturer} and execute it as a test.
   *
   * @param filename the file in resources/replays/ containing the replay
   * @param resultChecking enable checking of transaction results. This should always be enabled.
   *     However until existing problems are resolved with the replay mechanism, it may be useful to
   *     disable this for specific tests on a case-by-case basis.
   */
  public static void replay(String filename, boolean resultChecking) {
    final InputStream fileStream =
        ReplayTests.class.getClassLoader().getResourceAsStream("replays/%s".formatted(filename));
    if (fileStream == null) {
      fail("unable to find %s in replay resources".formatted(filename));
    }

    final InputStream stream;
    try {
      stream = filename.toLowerCase().endsWith("gz") ? new GZIPInputStream(fileStream) : fileStream;
    } catch (IOException e) {
      log.error("while loading {}: {}", filename, e.getMessage());
      throw new RuntimeException(e);
    }
    ToyExecutionEnvironment.builder()
        .resultChecking(resultChecking)
        .build()
        .replay(new BufferedReader(new InputStreamReader(stream)));
  }

  /**
   * Implementation of replay which enables result checking by default.
   *
   * @param filename
   */
  public static void replay(String filename) {
    replay(filename, true);
  }

  @Test
  void traceTxStartNotTheSameAsTxPrepare() {
    replay("start-vs-prepare-tx.json.gz");
  }

  @Test
  void fatMxp() {
    replay("2492975-2492977.json.gz", false);
  }

  @Test
  void leoFailingRange() {
    replay("5389571-5389577.json.gz", false);
  }

  @Test
  void failingMmuModexp() {
    replay("5995162.json.gz", false);
  }

  @Test
  void failRlpAddress() {
    replay("5995097.json.gz", false);
  }

  @Test
  void rlprcptManyTopicsWoLogData() {
    replay("6569423.json.gz", false);
  }

  @Test
  void multipleFailingCallToEcrecover() {
    replay("5000544.json.gz", false);
  }

  @Test
  void incident777zkGethMainnet() {
    replay("7461019-7461030.json.gz", false);
  }

  @Test
  void issue1006() {
    replay("6032696-6032699.json.gz", false);
  }

  @Test
  void issue1004() {
    replay("6020023-6020029.json.gz", false);
  }

  @Test
  void block_6110045() {
    // The purpose of this test is to check the mechanism for spotting divergence between the replay
    // tests and mainnet.  Specifically, this replay has transaction result information embedded
    // within it.
    replay("6110045.json.gz", false);
  }

  @Test
  void failingCreate2() {
    replay("2250197-2250197.json.gz", false);
  }

  @Test
  void blockHash1() {
    replay("8718090.json.gz", false);
  }

  @Test
  void blockHash2() {
    replay("8718330.json.gz", false);
  }

  // TODO: should be replaced by a unit test triggering AnyToRamWithPadding (mixed case) MMU
  // instruction
  @Test
  void negativeNumberOfMmioInstruction() {
    replay("6029454-6029459.json.gz", false);
  }
}
