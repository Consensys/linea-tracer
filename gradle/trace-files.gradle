/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// Special case: ALU modules
['add', 'ext', 'mod', 'mul'].each { moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = ["alu/${moduleName}/columns.lisp"]
    }
}

//
// Special case: hub
//
tasks.register("hub", TraceFilesTask) {
    group "Trace files generation"
    // dependsOn corsetExists

    module = 'hub'
    files = ['hub/constants.lisp', 'hub/columns/account.lisp', 'hub/columns/context.lisp', 'hub/columns/shared.lisp', 'hub/columns/stack.lisp',
             'hub/columns/storage.lisp', 'hub/columns/transaction.lisp', 'hub/columns/scenario.lisp', 'hub/columns/miscellaneous.lisp']
}

//
// Reference table
//
tasks.register('instdecoder', TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    moduleDir = "tables/instructionDecoder"
    module = "instructionDecoder"
    files = ["reftables/inst_decoder.lisp"]
}

tasks.register('shfreftable', TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    moduleDir = "tables/shf"
    module = "ShfRt"
    files = ["reftables/shf_reftable.lisp"]
}
tasks.register('binreftable', TraceFilesTask) {
    group "Trace files generation"
    dependsOn corsetExists

    moduleDir = "tables/bin"
    module = "BinRt"
    files = ["reftables/bin_reftable.lisp"]
}

//
// Put here modules following the conventional MODULE/columns.lisp naming scheme.
//
['bin', 'blockhash', 'euc', 'mmio', 'shf', 'wcp', 'rlptxn', 'rom', 'romlex', 'trm', 'stp', 'loginfo', 'logdata', 'gas'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        // dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp"]
    }
}

//
// Put here modules following the conventional MODULE/columns.lisp, MODULE/constants.lisp naming scheme.
//
['mmu', 'blake2fmodexpdata', 'blockdata', 'oob', 'exp', 'rlptxrcpt', 'rlpaddr', 'shakiradata', 'mxp', 'ecdata'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        // dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp", "${moduleName}/constants.lisp"]
    }
}

//
// TODO: txndata is an exception and should be fixed in the future to not reference global constants in this way
// and it should be able to import those values in the corset files themselves.
//
['txndata'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        // dependsOn corsetExists

        module = moduleName
        files = ["${moduleName}/columns.lisp", "constants/constants.lisp", "${moduleName}/constants.lisp"]
    }
}

//
// Shared constants:
//
['constants'].each {moduleName ->
    tasks.register(moduleName, TraceFilesTask) {
        group "Trace files generation"
        dependsOn corsetExists

        module = moduleName
        files = [ "${moduleName}/constants.lisp"]
    }
}
