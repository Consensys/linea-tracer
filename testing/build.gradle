import org.web3j.solidity.gradle.plugin.EVMVersion
import org.web3j.gradle.plugin.GenerateContractWrappers

plugins {
  id "common-plugins"
  id "org.web3j" version "4.12.2"
  id "linea.yul-plugin"
}

apply from: rootProject.file("gradle/corset.gradle")
apply from: rootProject.file("gradle/java.gradle")
apply from: rootProject.file("gradle/tests.gradle")
apply from: rootProject.file("gradle/dependency-management.gradle")
apply from: rootProject.file('gradle/common-dependencies.gradle')
apply from: rootProject.file("gradle/lint.gradle")

dependencies {
  implementation project(path: ':arithmetization')
  implementation "${besuArtifactGroup}:besu-datatypes"
  implementation "${besuArtifactGroup}:evm"
  implementation "${besuArtifactGroup}.internal:clique:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:common:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:config:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:core:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:metrics-core:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:referencetests:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:rlp:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:services:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:testutil:${besuVersion}"
  implementation "${besuArtifactGroup}.internal:algorithms:${besuVersion}"
  implementation "${besuArtifactGroup}:plugin-api"

  implementation 'org.junit.jupiter:junit-jupiter-api'
  runtimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  implementation 'org.junit.jupiter:junit-jupiter-params'
  runtimeOnly 'org.junit.vintage:junit-vintage-engine'

  implementation 'org.mockito:mockito-core'
  implementation 'org.mockito:mockito-junit-jupiter'
  implementation 'org.assertj:assertj-core'
}

node {
  download = false
}

tasks.withType(GenerateContractWrappers.class).configureEach {
  mustRunAfter(processResources)
}

web3j {
  generatedPackageName = "net.consensys.linea.testing.generated"
}

solidity {
  optimize = false
  prettyJson = true
  evmVersion = EVMVersion.LONDON
}

yul {
  solcVersion = "0.8.19"
  compilerJsonTemplatePath = "src/main/resources/templates/compiler_yul.json.template"
}
