/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package net.consensys.linea.zktracer.container.stacked;

import static com.google.common.base.Preconditions.checkState;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import lombok.Getter;
import lombok.experimental.Accessors;
import net.consensys.linea.zktracer.container.ModuleOperation;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Implements a system of pseudo-stacked squashed sets where {@link
 * ModuleOperationStackedSet#operationsCommitedToTheConflation()} represents the set of all
 * operations since the beginning of the conflation and {@link
 * ModuleOperationStackedSet#operationsInTransaction()} represents the operations added by the last
 * transaction. We can pop only the operations added by last transaction. The line counting is done
 * by a separate {@link CountOnlyOperation}.
 *
 * @param <E> the type of elements stored in the set
 */
@Accessors(fluent = true)
public class ModuleOperationStackedSet<E extends ModuleOperation> extends StackedSet<E> {
  private static final int EXPECTED_PROPORTION_OF_DUPLICATE = 1; // TODO: find me !
  private static final Logger log = LoggerFactory.getLogger(ModuleOperationStackedSet.class);
  private final CountOnlyOperation lineCounter = new CountOnlyOperation();
  @Getter private boolean conflationFinished = false;
  private boolean duplicateAlreadyRemoved = false; // TODO: add documentation about this

  public ModuleOperationStackedSet() {
    super();
  }

  /** Prefer this constructor as we preallocate more necessary memory */
  public ModuleOperationStackedSet(
      final int expectedConflationNumberOperations, final int expectedTransactionNumberOperations) {
    super(expectedConflationNumberOperations, expectedTransactionNumberOperations);
  }

  /**
   * Upon entering a new transaction, the set of operations generated by the previous transaction
   * {@link ModuleOperationStackedSet#operationsInTransaction()} (which is empty if no such
   * transaction exists) is added to the set of committed operations {@link
   * ModuleOperationStackedSet#operationsCommitedToTheConflation()}. {@link
   * ModuleOperationStackedSet#operationsInTransaction()} is further reset to be empty.
   */
  @Override
  public void enter() {
    if (!duplicateAlreadyRemoved) {
      lineCount();
    }
    super.enter();
    lineCounter.enter();
    duplicateAlreadyRemoved = false;
  }

  @Override
  public void pop() {
    super.pop();
    lineCounter.pop();
  }

  public int size() {
    return operationsInTransaction().size() + operationsCommitedToTheConflation().size();
  }

  public int lineCount() {
    deleteDuplicates();
    duplicateAlreadyRemoved = true;
    for (var operation : operationsInTransaction()) {
      lineCounter.add(operation.lineCount());
    }
    return lineCounter.lineCount();
  }

  public ArrayList<E> getAll() {
    checkState(conflationFinished, "Conflation not finished");
    return operationsCommitedToTheConflation();
  }

  public boolean isEmpty() {
    return size() == 0;
  }

  public boolean contains(Object o) {
    return operationsInTransaction().contains(o) || operationsCommitedToTheConflation().contains(o);
  }

  /**
   * Warn: as we only check if it's a new operation for the current transaction, it could return
   * true even if this operation is part of the conflation's already commited operations
   */
  @Override
  public boolean add(E e) {
    checkState(!conflationFinished, "Can't add operations if the conflation is finished");
    final boolean isNew = operationsInTransaction().add(e);
    if (!isNew) {
      log.trace(
          "Operation of type {} was already in operationsInTransaction hashset, reference is ",
          e.getClass().getName(),
          e);
    }
    return isNew;
  }

  public boolean containsAll(@NotNull Collection<?> c) {
    for (var x : c) {
      if (!contains(x)) {
        return false;
      }
    }
    return true;
  }

  public void addAll(@NotNull Collection<? extends E> c) {
    for (var x : c) {
      add(x);
    }
  }

  public void clear() {
    operationsCommitedToTheConflation().clear();
    operationsInTransaction().clear();
    lineCounter.clear();
  }

  public void finishConflation() {
    conflationFinished = true;
    if (!duplicateAlreadyRemoved) {
      lineCount();
    }
    operationsCommitedToTheConflation().addAll(operationsInTransaction());
    operationsInTransaction().clear();
    lineCounter.enter(); // this is not mandatory but it is more consistent
  }

  void deleteDuplicates() {
    operationsInTransaction().removeIf(e -> operationsCommitedToTheConflation().contains(e));
  }

  public List<E> sortOperations(Comparator<E> comparator) {
    final List<E> sortedOperations = new ArrayList<>(getAll());
    sortedOperations.sort(comparator);
    return sortedOperations;
  }
}
