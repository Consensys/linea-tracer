/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
  id "common-plugins"
}

apply from: rootProject.file("gradle/corset.gradle")
apply from: rootProject.file("gradle/java.gradle")
apply from: rootProject.file("gradle/tests.gradle")
apply from: rootProject.file("gradle/dependency-management.gradle")
apply from: rootProject.file('gradle/common-dependencies.gradle')
apply from: rootProject.file("gradle/lint.gradle")

configurations.configureEach {
  exclude module: 'log4j-api'
  exclude module: 'log4j-core'
  exclude module: 'log4j-slf4j2-impl'
}

tasks.register("generateBlockchainReferenceTests", RefTestGenerationTask) {
  refTestTemplateFilePath = "src/test/resources/templates/BlockchainReferenceTest.java.template"
  refTests = "src/test/resources/ethereum-tests/BlockchainTests"
  refTestJsonParamsDirectory = "BlockchainTests"
  refTestJsonParamsExcludedPath = "BlockchainTests/InvalidBlocks/bcExpectSection" // exclude test for test filling tool
  refTestNamePrefix = "BlockchainReferenceTest"
  generatedRefTestsOutput = "src/test/java/net/consensys/linea/generated/blockchain"
  failedTestsFilePath = System.getenv('FAILED_TEST_JSON_DIRECTORY') ?: "../tmp/local/"
  failedModule = System.getenv('FAILED_MODULE') ?: ""
  failedConstraint = System.getenv('FAILED_CONSTRAINT') ?: ""
}

tasks.register("generateGeneralStateReferenceTests", RefTestGenerationTask) {
  refTestTemplateFilePath = "src/test/resources/templates/GeneralStateReferenceTest.java.template"
  refTests = "src/test/resources/ethereum-tests/GeneralStateTests"
  refTestJsonParamsDirectory = "ethereum-tests/GeneralStateTests"
  refTestJsonParamsExcludedPath = ""
  refTestNamePrefix = "GeneralStateReferenceTest"
  generatedRefTestsOutput = "src/test/java/net/consensys/linea/generated/generalstate"
  failedTestsFilePath = System.getenv('FAILED_TEST_JSON_DIRECTORY') ?: "../tmp/local/"
  failedModule = System.getenv('FAILED_MODULE') ?: ""
  failedConstraint = System.getenv('FAILED_CONSTRAINT') ?: ""
}

tasks.register('referenceBlockchainTests', Test) {
  description = 'Runs ETH reference blockchain tests.'

  systemProperties["junit.jupiter.execution.timeout.default"] = "5 m" // 5 minutes
  systemProperties["junit.jupiter.execution.parallel.enabled"] = true
  systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
  systemProperties["junit.jupiter.execution.parallel.mode.classes.default"] = "concurrent"
  maxParallelForks = Runtime.getRuntime().availableProcessors()

  dependsOn generateBlockchainReferenceTests

  boolean isCiServer = System.getenv().containsKey("CI")
  minHeapSize = isCiServer ? "8g" :"4g"
  maxHeapSize = isCiServer ? "24g" : "8g"

  useJUnitPlatform {
    includeTags("BlockchainReferenceTest")
  }
}

tasks.register('referenceGeneralStateTests', Test) {
  description = 'Runs ETH reference general state tests.'

  dependsOn generateGeneralStateReferenceTests

  systemProperties["junit.jupiter.execution.timeout.default"] = "5 m" // 5 minutes
  systemProperties["junit.jupiter.execution.parallel.enabled"] = true
  systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
  systemProperties["junit.jupiter.execution.parallel.mode.classes.default"] = "concurrent"
  maxParallelForks = Runtime.getRuntime().availableProcessors()

  boolean isCiServer = System.getenv().containsKey("CI")
  minHeapSize = "4g"
  maxHeapSize = isCiServer ? "32g" : "8g"

  useJUnitPlatform {
    includeTags("GeneralStateReferenceTest")
  }
}

tasks.register('referenceTests', Test) {
  description = 'Runs ETH reference tests.'

  boolean isCiServer = System.getenv().containsKey("CI")
  minHeapSize = "4g"
  maxHeapSize = isCiServer ? "32g" : "8g"

  useJUnitPlatform {
    includeTags("BlockchainReferenceTest")
    includeTags("GeneralStateReferenceTest")
  }
}

dependencies {
  testImplementation "${besuArtifactGroup}:besu-datatypes"
  testImplementation "${besuArtifactGroup}:evm"
  testImplementation "${besuArtifactGroup}.internal:config:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:core:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:algorithms:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:metrics-core:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:referencetests:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:rlp:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:testutil:${besuVersion}"
  testImplementation "${besuArtifactGroup}.internal:trie:$besuVersion"
  testImplementation "${besuArtifactGroup}.internal:util:${besuVersion}"
  testImplementation "${besuArtifactGroup}:plugin-api"

  testImplementation 'io.tmio:tuweni-bytes'
  testImplementation 'io.tmio:tuweni-units'

  testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

  implementation project(":arithmetization")
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
}
